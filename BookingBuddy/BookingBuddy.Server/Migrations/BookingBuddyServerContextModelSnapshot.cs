// <auto-generated />
using System;
using BookingBuddy.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingBuddy.Server.Migrations
{
    [DbContext(typeof(BookingBuddyServerContext))]
    partial class BookingBuddyServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingBuddy.Server.Models.Amenity", b =>
                {
                    b.Property<string>("AmenityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AmenityId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Amenity");

                    b.HasAnnotation("Relational:JsonPropertyName", "amenities");

                    b.HasData(
                        new
                        {
                            AmenityId = "f97fbae3-c6cd-47d2-aa63-c1437d7061ce",
                            DisplayName = "Estacionamento",
                            Name = "Estacionamento"
                        },
                        new
                        {
                            AmenityId = "5617db65-fe16-426d-a5bc-0a610c2b70d0",
                            DisplayName = "Wifi",
                            Name = "Wifi"
                        },
                        new
                        {
                            AmenityId = "6a6f1e0e-a553-47ea-bb9a-7ee67cb23439",
                            DisplayName = "Cozinha",
                            Name = "Cozinha"
                        },
                        new
                        {
                            AmenityId = "053480be-fb4b-4bec-bb62-e2adb3b82773",
                            DisplayName = "Varanda",
                            Name = "Varanda"
                        },
                        new
                        {
                            AmenityId = "cc90fb38-6117-4407-adf8-16cccf2add58",
                            DisplayName = "Frigorífico",
                            Name = "Frigorifico"
                        },
                        new
                        {
                            AmenityId = "f2ba6a78-aa59-4736-ae43-b6cb78847989",
                            DisplayName = "Microondas",
                            Name = "Microondas"
                        },
                        new
                        {
                            AmenityId = "4bb2b889-6f54-414f-b028-e8803fb6e0a3",
                            DisplayName = "Quintal",
                            Name = "Quintal"
                        },
                        new
                        {
                            AmenityId = "ef33c3ee-c54a-440b-88ca-ba54d1562581",
                            DisplayName = "Máquina de Lavar",
                            Name = "MaquinaLavar"
                        },
                        new
                        {
                            AmenityId = "4378ad6c-8843-49a3-b079-7be467c4d49f",
                            DisplayName = "Piscina Partilhada",
                            Name = "PiscinaPartilhada"
                        },
                        new
                        {
                            AmenityId = "36a3614e-2457-4a5f-80a1-d86c4a79ae12",
                            DisplayName = "Piscina Individual",
                            Name = "PiscinaIndividual"
                        },
                        new
                        {
                            AmenityId = "79126ad8-e239-4591-8550-8c802f7dccde",
                            DisplayName = "Animais",
                            Name = "Animais"
                        },
                        new
                        {
                            AmenityId = "0b20e879-7131-458f-ba71-66e387a9cf5e",
                            DisplayName = "Câmaras",
                            Name = "Camaras"
                        },
                        new
                        {
                            AmenityId = "4fd72696-b235-4721-909f-702d74f844ef",
                            DisplayName = "TV",
                            Name = "Tv"
                        });
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("GroupBookingOrderOrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("GroupBookingOrderOrderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProviderId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasAnnotation("Relational:JsonPropertyName", "ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "0c0b8c49-c091-4995-a1a6-c6ac8e356aa3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "369d0f54-07a3-453a-bad2-a48ef49dbc18",
                            Description = "Esta é descrição da conta de administrador do BookingBuddy.",
                            Email = "bookingbuddy.admin@bookingbuddy.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedEmail = "BOOKINGBUDDY.ADMIN@BOOKINGBUDDY.COM",
                            NormalizedUserName = "BOOKINGBUDDY.ADMIN@BOOKINGBUDDY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKeKk9dCga9Ncc17Wv1IDFjjJNLDznukkbXmy2lB4PkgGerjOxPTBxWaa18Xq6DDLA==",
                            PhoneNumberConfirmed = false,
                            ProviderId = "75aa6a89-694f-4e03-b19e-068b4985501d",
                            SecurityStamp = "dcfdab4f-e371-45f8-af56-bbf8a077474c",
                            TwoFactorEnabled = false,
                            UserName = "bookingbuddy.admin@bookingbuddy.com"
                        },
                        new
                        {
                            Id = "af75dbbb-971a-41a0-9839-a4fb4dfa4c69",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0720ca83-6dd7-4dea-a341-5a84c16729f1",
                            Description = "Esta é descrição da conta de utilizador (padrão) do BookingBuddy.",
                            Email = "bookingbuddy.user@bookingbuddy.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "user",
                            NormalizedEmail = "BOOKINGBUDDY.USER@BOOKINGBUDDY.COM",
                            NormalizedUserName = "BOOKINGBUDDY.USER@BOOKINGBUDDY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAWkH+PXNxujI3Sne/jkARcermbFIZFdASYoEzO5OLARQQLTwbX6pQhnhKpg9hqA2Q==",
                            PhoneNumberConfirmed = false,
                            ProviderId = "75aa6a89-694f-4e03-b19e-068b4985501d",
                            SecurityStamp = "b473d921-9b6e-4295-b0bb-b18f33b5c562",
                            TwoFactorEnabled = false,
                            UserName = "bookingbuddy.user@bookingbuddy.com"
                        },
                        new
                        {
                            Id = "2d097a35-8958-4192-abd4-42512741fc36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "edafa4a6-9e4a-4a84-b349-d3396c37949c",
                            Description = "Esta é descrição da conta de utilizador 2 (padrão) do BookingBuddy.",
                            Email = "bookingbuddy.user2@bookingbuddy.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "user 2",
                            NormalizedEmail = "BOOKINGBUDDY.USER2@BOOKINGBUDDY.COM",
                            NormalizedUserName = "BOOKINGBUDDY.USER2@BOOKINGBUDDY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAkolHSLTjvmtpAuAq/aKoTDMUDHYc5ce8DkFqcEF95kdCnAsUHXiUIGaEcBno+jzA==",
                            PhoneNumberConfirmed = false,
                            ProviderId = "75aa6a89-694f-4e03-b19e-068b4985501d",
                            SecurityStamp = "6ba38805-c322-4e8a-845e-f9eeb280632c",
                            TwoFactorEnabled = false,
                            UserName = "bookingbuddy.user2@bookingbuddy.com"
                        },
                        new
                        {
                            Id = "4beab9d9-6c26-4691-a7ca-7f5d702efc24",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e40895e-7997-4b30-8939-cdd374f2d98f",
                            Description = "Esta é descrição da conta de utilizador 3 (padrão) do BookingBuddy.",
                            Email = "bookingbuddy.user3@bookingbuddy.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "user 3",
                            NormalizedEmail = "BOOKINGBUDDY.USER3@BOOKINGBUDDY.COM",
                            NormalizedUserName = "BOOKINGBUDDY.USER3@BOOKINGBUDDY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFydWTL5ouLERMgMBjbjSpX2MZe1pujLY84jabRZhMemds4XGBiB19knhQis8iU0bA==",
                            PhoneNumberConfirmed = false,
                            ProviderId = "75aa6a89-694f-4e03-b19e-068b4985501d",
                            SecurityStamp = "1d1a1c94-2c51-48ee-9731-0ddaa7300eac",
                            TwoFactorEnabled = false,
                            UserName = "bookingbuddy.user3@bookingbuddy.com"
                        },
                        new
                        {
                            Id = "ef74b58b-4501-4925-9433-fea9aa9dc697",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "972df858-007c-4f11-925f-6b6489c2e2c9",
                            Description = "Esta é descrição da conta de utilizador 4 (padrão) do BookingBuddy.",
                            Email = "bookingbuddy.user4@bookingbuddy.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "user 4",
                            NormalizedEmail = "BOOKINGBUDDY.USER4@BOOKINGBUDDY.COM",
                            NormalizedUserName = "BOOKINGBUDDY.USER4@BOOKINGBUDDY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKrG3eT85UbzBK5J/SGafV6MxdDDxH8IL1nEkyWHw5VXpAeM7Zg/CdNReIeKjzY5lQ==",
                            PhoneNumberConfirmed = false,
                            ProviderId = "75aa6a89-694f-4e03-b19e-068b4985501d",
                            SecurityStamp = "0b84e7d7-e348-4079-9dc4-9a48c9a6166d",
                            TwoFactorEnabled = false,
                            UserName = "bookingbuddy.user4@bookingbuddy.com"
                        },
                        new
                        {
                            Id = "a89bb5da-39e6-406a-8822-053b4d944a95",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "877ec2a9-0a1a-47dd-940d-9c09d62fb279",
                            Description = "Esta é descrição da conta de utilizador 5 (padrão) do BookingBuddy.",
                            Email = "bookingbuddy.user5@bookingbuddy.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "user 5",
                            NormalizedEmail = "BOOKINGBUDDY.USER5@BOOKINGBUDDY.COM",
                            NormalizedUserName = "BOOKINGBUDDY.USER5@BOOKINGBUDDY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHfKP7d3/es+GSrJCj5LKKzk3a4NCljiCCHTmoWfuTlDkbaf+9Z//sgFXWNY1uQX9Q==",
                            PhoneNumberConfirmed = false,
                            ProviderId = "75aa6a89-694f-4e03-b19e-068b4985501d",
                            SecurityStamp = "dd095d83-0295-47e5-aa31-cbbbcca08b55",
                            TwoFactorEnabled = false,
                            UserName = "bookingbuddy.user5@bookingbuddy.com"
                        },
                        new
                        {
                            Id = "fee78d4a-8e38-4d08-8cbe-a9349759bfee",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "27afad79-b36b-4742-a05f-84c7513628a0",
                            Description = "Esta é a descrição da conta de proprietário do BookingBuddy.",
                            Email = "bookingbuddy.landlord@bookingbuddy.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "landlord",
                            NormalizedEmail = "BOOKINGBUDDY.LANDLORD@BOOKINGBUDDY.COM",
                            NormalizedUserName = "BOOKINGBUDDY.LANDLORD@BOOKINGBUDDY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEp2NIiiJCNVmjPMBmC+l47C5sjOELTmWXleswGVtRH+iH15IBwjfnNs40vGXXlZJw==",
                            PhoneNumberConfirmed = false,
                            ProviderId = "75aa6a89-694f-4e03-b19e-068b4985501d",
                            SecurityStamp = "c83ef7dd-6555-4c23-9bed-eb6738dcec10",
                            TwoFactorEnabled = false,
                            UserName = "bookingbuddy.landlord@bookingbuddy.com"
                        },
                        new
                        {
                            Id = "c7923f0d-7244-4afd-8eb6-b9703e189b10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa39c627-5278-4561-a23e-c06e7683b646",
                            Description = "Esta é a descrição da conta de teste do JMeter.",
                            Email = "bookingbuddy.jmeter@bookingbuddy.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "JMeter",
                            NormalizedEmail = "BOOKINGBUDDY.JMETER@BOOKINGBUDDY.COM",
                            NormalizedUserName = "BOOKINGBUDDY.JMETER@BOOKINGBUDDY.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMXgPjdPmirLyyym55lEjOSZ0ijwcyiCjk+W0TRWtS9bPCe+qi4Q4peToZLDXKU5qw==",
                            PhoneNumberConfirmed = false,
                            ProviderId = "75aa6a89-694f-4e03-b19e-068b4985501d",
                            SecurityStamp = "2f98efd6-78ee-4ccb-9f23-2d28c9a92895",
                            TwoFactorEnabled = false,
                            UserName = "bookingbuddy.jmeter@bookingbuddy.com"
                        });
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.AspNetProvider", b =>
                {
                    b.Property<string>("AspNetProviderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AspNetProviderId");

                    b.ToTable("AspNetProviders");

                    b.HasData(
                        new
                        {
                            AspNetProviderId = "dfa28df0-53e7-467c-99f4-a31653e1d781",
                            Name = "google",
                            NormalizedName = "GOOGLE"
                        },
                        new
                        {
                            AspNetProviderId = "68d9d269-c11e-4b56-9f03-24eb231bf823",
                            Name = "microsoft",
                            NormalizedName = "MICROSOFT"
                        },
                        new
                        {
                            AspNetProviderId = "75aa6a89-694f-4e03-b19e-068b4985501d",
                            Name = "local",
                            NormalizedName = "LOCAL"
                        });
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.BlockedDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("End")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Start")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("BlockedDate");

                    b.HasAnnotation("Relational:JsonPropertyName", "blockedDates");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.BookingMessage", b =>
                {
                    b.Property<string>("BookingMessageId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookingOrderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.HasKey("BookingMessageId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("BookingMessage");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.BookingOrder", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PropertyId");

                    b.ToTable("BookingOrder");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Chat", b =>
                {
                    b.Property<string>("ChatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MessageIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ChatId");

                    b.ToTable("Chat");

                    b.HasAnnotation("Relational:JsonPropertyName", "chat");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.ChatMessage", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "messageId");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "applicationUserId");

                    b.Property<string>("ChatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "sentAt");

                    b.HasKey("MessageId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatMessage");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Discount", b =>
                {
                    b.Property<string>("DiscountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DiscountId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Discount");

                    b.HasAnnotation("Relational:JsonPropertyName", "discounts");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteId"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FavoriteId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Group", b =>
                {
                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "groupId");

                    b.Property<string>("AddedPropertyIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "addedPropertyIds");

                    b.Property<string>("ChatId")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "chatId");

                    b.Property<string>("ChosenProperty")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "chosenProperty");

                    b.Property<int>("GroupAction")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "groupAction");

                    b.Property<string>("GroupBookingId")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "groupBookingId");

                    b.Property<string>("GroupOwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "groupOwnerId");

                    b.Property<string>("MembersId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "membersId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("UserVoteIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "userVoteIds");

                    b.HasKey("GroupId");

                    b.HasIndex("ChatId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.GroupBookingOrder", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupPaymentIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaidByIds")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PropertyId");

                    b.ToTable("GroupBookingOrder");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.GroupOrderPayment", b =>
                {
                    b.Property<string>("GroupPaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupBookingOrderOrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GroupPaymentId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("GroupBookingOrderOrderId");

                    b.HasIndex("PaymentId");

                    b.ToTable("GroupOrderPayment");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Payment", b =>
                {
                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Entity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpiryDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.PromoteOrder", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PromoteOrder");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.PromotionOrder", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PromotionOrder");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Property", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "propertyId");

                    b.Property<string>("AmenityIds")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "amenityIds");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "applicationUserId");

                    b.Property<int>("Clicks")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "clicks");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("ImagesUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "imagesUrl");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("Relational:JsonPropertyName", "location");

                    b.Property<int>("MaxGuestsNumber")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "maxGuestsNumber");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("Relational:JsonPropertyName", "pricePerNight");

                    b.Property<int>("RoomsNumber")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "roomsNumber");

                    b.HasKey("PropertyId");

                    b.ToTable("Property");

                    b.HasAnnotation("Relational:JsonPropertyName", "Property");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Rating", b =>
                {
                    b.Property<string>("RatingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.UserAddedProperty", b =>
                {
                    b.Property<string>("UserAddedPropertyId")
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "userAddedPropertyId");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "userId");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasAnnotation("Relational:JsonPropertyName", "propertyId");

                    b.HasKey("UserAddedPropertyId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PropertyId");

                    b.ToTable("UserAddedProperty");

                    b.HasAnnotation("Relational:JsonPropertyName", "addedProperties");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.UserVote", b =>
                {
                    b.Property<string>("UserVoteId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PropertyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserVoteId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PropertyId");

                    b.ToTable("UserVote");

                    b.HasAnnotation("Relational:JsonPropertyName", "userVotes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "21fe7dd3-d46b-4fac-8acd-df670b71922e",
                            ConcurrencyStamp = "4a65c1c6-ba0a-49ff-9a2e-c6419d47d0bf",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "279665c0-813c-415e-ae60-cf1d99f25c69",
                            ConcurrencyStamp = "f9e546d0-af4d-4afa-8dd9-eb86a16943a5",
                            Name = "user",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "07da9e25-3270-4d71-adb0-c9f43507d3fd",
                            ConcurrencyStamp = "410a26ed-2dc3-4c91-ab01-e6537aafb57a",
                            Name = "landlord",
                            NormalizedName = "LANDLORD"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0c0b8c49-c091-4995-a1a6-c6ac8e356aa3",
                            RoleId = "21fe7dd3-d46b-4fac-8acd-df670b71922e"
                        },
                        new
                        {
                            UserId = "af75dbbb-971a-41a0-9839-a4fb4dfa4c69",
                            RoleId = "279665c0-813c-415e-ae60-cf1d99f25c69"
                        },
                        new
                        {
                            UserId = "2d097a35-8958-4192-abd4-42512741fc36",
                            RoleId = "279665c0-813c-415e-ae60-cf1d99f25c69"
                        },
                        new
                        {
                            UserId = "4beab9d9-6c26-4691-a7ca-7f5d702efc24",
                            RoleId = "279665c0-813c-415e-ae60-cf1d99f25c69"
                        },
                        new
                        {
                            UserId = "ef74b58b-4501-4925-9433-fea9aa9dc697",
                            RoleId = "279665c0-813c-415e-ae60-cf1d99f25c69"
                        },
                        new
                        {
                            UserId = "a89bb5da-39e6-406a-8822-053b4d944a95",
                            RoleId = "279665c0-813c-415e-ae60-cf1d99f25c69"
                        },
                        new
                        {
                            UserId = "fee78d4a-8e38-4d08-8cbe-a9349759bfee",
                            RoleId = "07da9e25-3270-4d71-adb0-c9f43507d3fd"
                        },
                        new
                        {
                            UserId = "c7923f0d-7244-4afd-8eb6-b9703e189b10",
                            RoleId = "21fe7dd3-d46b-4fac-8acd-df670b71922e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Amenity", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.Property", null)
                        .WithMany("Amenities")
                        .HasForeignKey("PropertyId");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.ApplicationUser", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.GroupBookingOrder", null)
                        .WithMany("PaidBy")
                        .HasForeignKey("GroupBookingOrderOrderId");

                    b.HasOne("BookingBuddy.Server.Models.AspNetProvider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.BlockedDate", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.Property", null)
                        .WithMany("BlockedDates")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.BookingMessage", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.BookingOrder", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingBuddy.Server.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingBuddy.Server.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Payment");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.ChatMessage", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingBuddy.Server.Models.Chat", null)
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Discount", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.Property", null)
                        .WithMany("Discounts")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Favorite", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingBuddy.Server.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Group", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.GroupBookingOrder", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingBuddy.Server.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingBuddy.Server.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Group");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.GroupOrderPayment", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingBuddy.Server.Models.GroupBookingOrder", null)
                        .WithMany("GroupPayments")
                        .HasForeignKey("GroupBookingOrderOrderId");

                    b.HasOne("BookingBuddy.Server.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.PromoteOrder", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingBuddy.Server.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingBuddy.Server.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Payment");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.PromotionOrder", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingBuddy.Server.Models.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingBuddy.Server.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Payment");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Rating", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.UserAddedProperty", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingBuddy.Server.Models.Group", null)
                        .WithMany("AddedProperties")
                        .HasForeignKey("GroupId");

                    b.HasOne("BookingBuddy.Server.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.UserVote", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingBuddy.Server.Models.Group", null)
                        .WithMany("UserVotes")
                        .HasForeignKey("GroupId");

                    b.HasOne("BookingBuddy.Server.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BookingBuddy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Chat", b =>
                {
                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Group", b =>
                {
                    b.Navigation("AddedProperties");

                    b.Navigation("UserVotes");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.GroupBookingOrder", b =>
                {
                    b.Navigation("GroupPayments");

                    b.Navigation("PaidBy");
                });

            modelBuilder.Entity("BookingBuddy.Server.Models.Property", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("BlockedDates");

                    b.Navigation("Discounts");
                });
#pragma warning restore 612, 618
        }
    }
}
